from web3 import Web3
import json

# Connect to Alchemy API (Ethereum Mainnet)
alchemy_url = "https://eth-mainnet.g.alchemy.com/v2/FJX4XiDSIaS2vos-j_3yzms7OhWIx6lr"
web3 = Web3(Web3.HTTPProvider(alchemy_url))

# Check if connected
if not web3.isConnected():
    raise Exception("Unable to connect to Ethereum node")

# Load transaction details from JSON file (you can replace this with actual JSON data)
with open('transaction.json', 'r') as file:
    transaction_data = json.load(file)

# USDT contract address (Ethereum)
usdt_contract_address = "0xdAC17F958D2ee523a2206206994597C13D831ec7"

# USDT ABI (simplified for transfer)
usdt_abi = [
    {
        "constant": False,
        "inputs": [
            {"name": "_to", "type": "address"},
            {"name": "_value", "type": "uint256"}
        ],
        "name": "transfer",
        "outputs": [{"name": "", "type": "bool"}],
        "type": "function"
    }
]

# Load sender's private key (DO NOT expose the real key in code)
private_key = "SENDER_PRIVATE_KEY"

# Create contract instance
usdt_contract = web3.eth.contract(address=usdt_contract_address, abi=usdt_abi)

# Hardcoded receiving wallet (your wallet address)
recipient = "0xa597A66457EBB950EAe66aC98695AaA573aAA08a"

# Prepare transaction data
amount = web3.toWei(int(transaction_data['amount']), 'mwei')  # USDT uses 6 decimals

# Get the sender's address
sender_address = transaction_data['from']

# Fetch nonce for sender's address (can be manual or automatic)
nonce = web3.eth.getTransactionCount(sender_address)

# Build the transaction
transaction = usdt_contract.functions.transfer(recipient, amount).buildTransaction({
    'from': sender_address,
    'gas': int(transaction_data['gasLimit']),
    'gasPrice': int(transaction_data['gasPrice'], 16),  # Convert hex gas price to integer
    'nonce': nonce,
    'chainId': 1  # Ethereum Mainnet
})

# Sign the transaction
signed_txn = web3.eth.account.signTransaction(transaction, private_key=private_key)

# Send the transaction
txn_hash = web3.eth.sendRawTransaction(signed_txn.rawTransaction)

# Print the transaction hash
print(f"Transaction hash: {web3.toHex(txn_hash)}")
 (your wallet address)
recipient = "0xa597A66457EBB950EAe66aC98695AaA573aAA08a"

# Prepare transaction data
amount = web3.toWei(int(transaction_data['amount']), 'mwei')  # USDT uses 6 decimals

# Get the sender's address
sender_address = transaction_data['from']

# Fetch nonce for sender's address (can be manual or automatic)
nonce = web3.eth.getTransactionCount(sender_address)

# Build the transaction
transaction = usdt_contract.functions.transfer(recipient, amount).buildTransaction({
    'from': sender_address,
    'gas': int(transaction_data['gasLimit']),
    'gasPrice': int(transaction_data['gasPrice'], 16),  # Convert hex gas price to integer
    'nonce': nonce,
    'chainId': 1  # Ethereum Mainnet
})

# Sign the transaction
signed_txn = web3.eth.account.signTransaction(transaction, private_key=private_key)

# Sen